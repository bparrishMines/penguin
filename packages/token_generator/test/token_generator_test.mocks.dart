// Mocks generated by Mockito 5.0.17 from annotations
// in token_generator/test/token_generator_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:io' as _i6;

import 'package:file/src/interface/directory.dart' as _i3;
import 'package:file/src/interface/file.dart' as _i4;
import 'package:file/src/interface/file_system.dart' as _i7;
import 'package:file/src/interface/link.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:path/path.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeContext_0 extends _i1.Fake implements _i2.Context {}

class _FakeDirectory_1 extends _i1.Fake implements _i3.Directory {}

class _FakeFile_2 extends _i1.Fake implements _i4.File {}

class _FakeLink_3 extends _i1.Fake implements _i5.Link {}

class _FakeFileStat_4 extends _i1.Fake implements _i6.FileStat {}

class _FakeFileSystemEntityType_5 extends _i1.Fake
    implements _i6.FileSystemEntityType {}

/// A class which mocks [FileSystem].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystem extends _i1.Mock implements _i7.FileSystem {
  MockFileSystem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Context get path => (super.noSuchMethod(Invocation.getter(#path),
      returnValue: _FakeContext_0()) as _i2.Context);
  @override
  _i3.Directory get systemTempDirectory =>
      (super.noSuchMethod(Invocation.getter(#systemTempDirectory),
          returnValue: _FakeDirectory_1()) as _i3.Directory);
  @override
  _i3.Directory get currentDirectory =>
      (super.noSuchMethod(Invocation.getter(#currentDirectory),
          returnValue: _FakeDirectory_1()) as _i3.Directory);
  @override
  set currentDirectory(dynamic path) =>
      super.noSuchMethod(Invocation.setter(#currentDirectory, path),
          returnValueForMissingStub: null);
  @override
  bool get isWatchSupported =>
      (super.noSuchMethod(Invocation.getter(#isWatchSupported),
          returnValue: false) as bool);
  @override
  _i3.Directory directory(dynamic path) =>
      (super.noSuchMethod(Invocation.method(#directory, [path]),
          returnValue: _FakeDirectory_1()) as _i3.Directory);
  @override
  _i4.File file(dynamic path) =>
      (super.noSuchMethod(Invocation.method(#file, [path]),
          returnValue: _FakeFile_2()) as _i4.File);
  @override
  _i5.Link link(dynamic path) =>
      (super.noSuchMethod(Invocation.method(#link, [path]),
          returnValue: _FakeLink_3()) as _i5.Link);
  @override
  _i8.Future<_i6.FileStat> stat(String? path) =>
      (super.noSuchMethod(Invocation.method(#stat, [path]),
              returnValue: Future<_i6.FileStat>.value(_FakeFileStat_4()))
          as _i8.Future<_i6.FileStat>);
  @override
  _i6.FileStat statSync(String? path) =>
      (super.noSuchMethod(Invocation.method(#statSync, [path]),
          returnValue: _FakeFileStat_4()) as _i6.FileStat);
  @override
  _i8.Future<bool> identical(String? path1, String? path2) =>
      (super.noSuchMethod(Invocation.method(#identical, [path1, path2]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  bool identicalSync(String? path1, String? path2) =>
      (super.noSuchMethod(Invocation.method(#identicalSync, [path1, path2]),
          returnValue: false) as bool);
  @override
  _i8.Future<_i6.FileSystemEntityType> type(String? path,
          {bool? followLinks = true}) =>
      (super.noSuchMethod(
              Invocation.method(#type, [path], {#followLinks: followLinks}),
              returnValue: Future<_i6.FileSystemEntityType>.value(
                  _FakeFileSystemEntityType_5()))
          as _i8.Future<_i6.FileSystemEntityType>);
  @override
  _i6.FileSystemEntityType typeSync(String? path, {bool? followLinks = true}) =>
      (super.noSuchMethod(
              Invocation.method(#typeSync, [path], {#followLinks: followLinks}),
              returnValue: _FakeFileSystemEntityType_5())
          as _i6.FileSystemEntityType);
  @override
  _i8.Future<bool> isFile(String? path) =>
      (super.noSuchMethod(Invocation.method(#isFile, [path]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  bool isFileSync(String? path) =>
      (super.noSuchMethod(Invocation.method(#isFileSync, [path]),
          returnValue: false) as bool);
  @override
  _i8.Future<bool> isDirectory(String? path) =>
      (super.noSuchMethod(Invocation.method(#isDirectory, [path]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  bool isDirectorySync(String? path) =>
      (super.noSuchMethod(Invocation.method(#isDirectorySync, [path]),
          returnValue: false) as bool);
  @override
  _i8.Future<bool> isLink(String? path) =>
      (super.noSuchMethod(Invocation.method(#isLink, [path]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  bool isLinkSync(String? path) =>
      (super.noSuchMethod(Invocation.method(#isLinkSync, [path]),
          returnValue: false) as bool);
  @override
  String getPath(dynamic path) =>
      (super.noSuchMethod(Invocation.method(#getPath, [path]), returnValue: '')
          as String);
}
